
#include <iostream>


/// Այս ստրուկտուրան ներկայացնում է իրենից հանգույցի կառուցվածքը։
struct Node
{
    int value;
    Node* link;
};


/// Ֆունկցիան շրջանցում է և տպում է ցուցակը, սկսած փոխանցված 'head' 
/// հանգույցից։
void iterate( const Node* head )
{
    const Node* n = head;
    while ( n != nullptr ) {
        std::cout << " " << n->value;
        n = n->link;
    }
    std::cout << std::endl;  // Ավարտելուց անցնել հաջորդ տող
}


/// Ֆունկցիան հաշվում և վերադարձնում է թե փոխանցված 'head' հանգույցից սկսած
/// որքա՞ն հանգույց դեռ ունի ցուցակը։
int size( const Node* head )
{
    // Իրականացնել ինքնուրույն
    //
    //
    return -1;
}


/// Ֆունկցիան տպում է էկրանին 'head' հանգույցից սկսած ամեն երկրորդ հանգույցի 
/// արժեքը, այդպես մինչև ցուցակի վերջ։
void printEverySecond( const Node* head )
{
    // Իրականացնել ինքնուրույն
    //
    //
}


/// Ֆունկցիան ստեղծում է նոր հանգույց 'newValue' արժեքով, և տեղադրում իրեն 
/// 'previous'-ից անմիջապես հետո։
void insert( Node* previous, int newValue )
{
    // Հիշում ենք հաջորդ հանգույցը
    Node* next = previous->link;
    // Ստեղծում ենք նոր հանգույցը
    Node* newNode = new Node;
    // Կատարում ենք անհրաժեշտ վերագրումներ
    newNode->value = newValue;
    newNode->link = next;
    previous->link = newNode;
}


/// Ֆունկցիան ձևափոխում է 'head' հանգույցով սկսվող ցուցակը այնպես որ ամեն 
/// կենտ արժեքը իր մեջ կրկնվի 2 անգամ։
void duplicateOdds( Node* head )
{
    // Իրականացնել ինքնուրույն
    //
    //
}


/// Ֆունկցիան տրված 'previous' հանգույցից անմիջապես հետո ավելացնում է 
/// 2 նոր հանգույց, համապատասխանաբար 'a' և 'b' արժեքներով։
void insertTwo( Node* previous, int a, int b )
{
    // Իրականացնել ինքնուրույն
    //
    //
}


/// Ֆունկցիան հեռացնում է ցուցակից 'previous' հանգույցից անմիջապես հետո 
/// եկող 1 հանգույց։
void remove( Node* previous )
{
    // Գտնում ենք հեռացման ենթակա հանգույցը
    Node* toRemove = previous->link;
    // Հեռացնում ենք իրեն
    previous->link = toRemove->link;
    delete toRemove;
}


/// Ֆունկցիան հեռացնում է 'head' հանգույցով սկսվող ցուցակից հարևան այն 
/// հանգույցները, որոնց արժեքները նույնն են, թողնելով այդպիսի հանգույցներից 
/// միայն մեկը։
void removeDuplicates( Node* head )
{
    // Իրականացնել ինքնուրույն
    //
    //
}


/// Ֆունկցիան հեռացնում է ցուցակից 'previous' հանգույցից անմիջապես հետո եկող 
/// 3 հարևան հանգույցները։
void removeThree( Node* previous )
{
    // Իրականացնել ինքնուրույն
    //
    //
}


/// Ֆունկցիան ստեղծում է ցուցակ այն արժեքներով, որ գրված են 'x' զանգվածի մեջ։
/// Համարվում է որ զանգվածի երկարությունը հավասար է 'n'-ի, հետևաբար ցուցակի 
/// երկարությունն էլ պետք է ստացվի այդքան։
/// Ֆունկցիան պետք է վերադարձնի ստեղծված ցուցակի առաջին հանգույցի վրա 
/// ցուցիչը։
Node* arrayToList( const int x[], int n )
{
    // Իրականացնել ինքնուրույն
    //
    //
    return nullptr;
}


int main( int argc, char* argv[] )
{
    // Ստեղծում ենք սկզբնական ցուցակը, 4 հանգույցից. [10, 7, 3, 8]
    //   ստեղծում ենք հանգույցները
    Node* n1 = new Node;
    n1->value = 10;
    Node* n2 = new Node;
    n2->value = 7;
    Node* n3 = new Node;
    n3->value = 3;
    Node* n4 = new Node;
    n4->value = 8;
    //   կապում ենք միմյանց միջև
    n1->link = n2;
    n2->link = n3;
    n3->link = n4;
    n4->link = nullptr;

    // Շրջանցում ենք իրեն
    iterate( n1 );

    // Բացել այս կտորը 'size()' ֆունկցիան իրականացնելուց հետո։
    /*
    std::cout << size( n1 ) << std::endl;  // պետք է ստացվի '4'
    */

    // Ավելացնում ենք նոր արժեքներ
    insert( n1, 15 );  // ստացվելու է [10, 15, 7, 3, 8]
    iterate( n1 );
    insert( n3, 46 );  // ստացվելու է [10, 15, 7, 3, 46, 8]
    iterate( n1 );

    // Բացել այս կտորը 'printEverySecond()' ֆունկցիան իրականացնելուց հետո։
    /*
    printEverySecond( n1 );  // պետք է ստացվի [15, 3, 8]
    */

    // Հեռացնում ենք արժեքներ
    remove( n2 );    // ստացվելու է [10, 15, 7, 46, 8]
    iterate( n1 );
    remove( n1 );    // ստացվելու է [10, 7, 46, 8]
    iterate( n1 );

    // Բացել այս կտորը 'duplicateOdds()' ֆունկցիան իրականացնելուց հետո։
    /*
    duplicateOdds( n1 );
    iterate( n1 );  // պետք է ստացվի [10, 7, 7, 46, 8]
    */

    // Բացել այս կտորը 'insertTwo()' ֆունկցիան իրականացնելուց հետո
    /*
    insertTwo( n1, 10, 13 );
    iterate( n1 );  // պետք է ստացվի [10, 10, 13, 7, 7, 46, 8]
    */

    // Բացել այս կտորը 'removeDuplicates()' ֆունկցիան իրականացնելուց հետո
    /*
    removeDuplicates( n1 );
    iterate( n1 );  // պետք է ստացվի [10, 13, 7, 46, 8]
    */

    // Բացել այս կտորը removeThree() ֆունկցիան իրականացնելուց հետո
    /*
    removeThree( n1 );
    iterate( n1 );  // պետք է ստացվի [10, 8]
    */

}
