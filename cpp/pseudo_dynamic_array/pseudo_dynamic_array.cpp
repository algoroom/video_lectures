
#include <iostream>


/// Այս ստրուկտուրան նկարագրում է 1 պսևդո-դինամիկ զանգված։
struct PdArray
{
	/// Սա ցույց է տալիս զանգվածի առավելագույն չափսը։ Այս օրինակում այն 
	/// հատատուն է բոլոր պսևդո-դինամիկ զանգվածների համար։
	static constexpr int CAPACITY = 10;

	/// Տարածքը, որտեղ պահվում են զանգվածի արժեքները։
	int data[ CAPACITY ];

	/// Թե այդ տարածքի առաջին քանի՞ արժեքներն են այս պահին օգտագործվում։
	int size;
};


/// Ֆունկցիան ավելացնում է 'a' պսևդո-դինամիկ զանգվածի մեջ 'value' արժեքը 
/// այնպես, որ այն հայտնվի 'index' համարով դիրքում։
void insert( PdArray& a, int value, int index )
{
	// Ստուգում ենք արդյո՞ք կա տեղ նոր արժեքի համար
	if ( a.size == a.CAPACITY )
		return;
	// Տեղաշարժում ենք անհրաժեշտ եղած արժեքները դեպի աջ
	for ( int i = a.size - 1; i >= index; --i )
		a.data[ i+1 ] = a.data[ i ];
	// Կատարում ենք տեղադրումը
	a.data[ index ] = value;
	// Չենք մոռանում ավելացնել այս պահին օգտագործվող արժեքների քանակը
	++a.size;
}


/// Ֆունկցիան հեռացնում է տրված 'a' պսևդո-դինամիկ զանգվածից 'index' դիրքում 
/// գտնվող թիվը։
void remove( PdArray& a, int index )
{
	// Իրականացնել ինքնուրույն
	//
	//
}


/// Ֆունկցիան տրված 'a' պսևդո-դինամիկ զանգվածի հիման վրա ստեղծում ու 
/// վերադարձնում է նոր պսևդո-դինամիկ զանգված, որտեղ 'a'-ի 10-ից փոքր 
/// ամեն արժեք կրկնվում է 2 անգամ, իսկ մնացածները պարզապես արտագրվում են։
PdArray duplicateSome( const PdArray& a )
{
	// Ստեղխում ու սկզբնարժեքավորում ենք նոր զանգվածը
	PdArray b;
	b.size = 0;
	// Անցնում ենք տրված զանգվածի արժեքներով
	for ( int i = 0; i < a.size; ++i ) {
		if ( a.data[ i ] < 10 ) {
			// կրկնում ենք 2 անգամ
			b.data[ b.size ] = a.data[ i ];
			b.data[ b.size + 1 ] = a.data[ i ];
			b.size += 2;
		}
		else {
			// գրում ենք 1 անգամ
			b.data[ b.size ] = a.data[ i ];
			++b.size;
		}
	}
	return b;
}


/// Ֆունկցիան ստեղծում և վերադարձնում է նոր պսևդո-դինամիկ զանգված, 
/// տրված 'a' պսևդո-դինամիկ զանգվածի հիման վրա։ Ստեղծվող զանգվածում 
/// 'a'-ի ամեն երկրորդ արժեքը պետք է կրկնվի 3 անգամ։
PdArray repeatEvery2ndThreeTimes( const PdArray& a )
{
	// Իրականացնել ինքնուրույն
	//
	//
	return PdArray();
}


/// Ֆունկցիան հեռացնում է փոխանցված 'a' պսևդո-դինամիկ զանգվածի միջից 
/// բոլոր բացասական արժեքները, և անում է դա առանց այլ զանգվածի օգտագործման։
void removeNegative( PdArray& a )
{
	int i = 0;  // կարդալու ինդեքս
	int j = 0;  // գրելու ինդեքս
	// Անցնում ենք զանգվածի բոլոր արժեքներով՝ ձախից աջ
	while ( i < a.size ) {
		if ( a.data[ i ] < 0 ) {
			// պարզապես բաց ենք թողնում արժեքը
			++i;
		}
		else {
			// տեղափոխում ենք արժեքը հնարավորինս ձախ
			a.data[ j ] = a.data[ i ];
			++i;
			++j;
		}
	}
	// Հիշում ենք արդեն կրճատված զանգվածի նոր չափսը
	a.size = j;
}


/// Ֆունկցիան հեռացնում է 'a' պսևդո-դինամիկ զանգվածից զույց ինդեքսներում 
/// գրված բոլոր թվերը։
void removeAtEvenIndexes( PdArray& a )
{
	// Իրականացնել ինքնուրույն
	//
	//
}


/// Ֆունկցիան հեռացնում է 'a' պսևդո-դինամիկ զանգվածից հարևան կրկնվող 
/// արժեքները, թողնելով այդպիսիններից մեկական հատ։
void removeDuplicates( PdArray& a )
{
	// Իրականացնել ինքնուրույն
	//
	//
}


/// Ֆունկցիան տպում է էկրանին փոխանցված 'a' պսևդո-դինամիկ զանգվածի 
/// պարունակությունը։
void print( const PdArray& a )
{
	std::cout << "[";
	for ( int i = 0; i < a.size; ++i )
		std::cout << " " << a.data[ i ];
	std::cout << " ]" << std::endl;
}


int main( int argc, char* argv[] )
{
	// Ստեղծում ենք դատարկ պսևդո-դինամիկ զանգված
	PdArray a;
	a.size = 0;

	// Ավելացնում ենք առաջին արժեքները
	insert( a, 8, 0 );
	insert( a, 12, 1 );
	insert( a, 4, 2 );
	insert( a, 15, 3 );
	print( a );  // [ 8, 12, 4, 15 ]

	PdArray b = duplicateSome( a );
	print( b );  // [ 8, 8, 12, 4, 4, 15 ]

	// Ավելացնում ենք նաև բացասական թվեր
	insert( b, -20, 4 );
	insert( b, -8, 3 );
	insert( b, -1, 3 );
	insert( b, -6, 1 );
	print( b );  // [ 8, -6, 8, 12, -1, -8, 4, -20, 4, 15 ]

	// Հեռացնում ենք այդ բացասական թվերը
	removeNegative( b );
	print( b );  // [ 8, 8, 12, 4, 4, 15 ]
}
